+++ PHP code demarcation

* PHP code must always be delimited by the full-form, standard PHP tags
* Short tags are never allowed. For files containing only PHP code, the closing tag must always be omitted


+++ Strings

* When a string is literal (contains no variable substitutions), the apostrophe or "single quote" must always used to demarcate the string:

<code type="php">
// literal string
$string = 'something';
</code>

* When a literal string itself contains apostrophes, it is permitted to demarcate the string with quotation marks or "double quotes". This is especially encouraged for SQL statements:

<code type="php">
// string contains apostrophes
$sql = "SELECT id, name FROM people WHERE name = 'Fred' OR name = 'Susan'";
</code>

* Variable substitution is permitted using the following form:

<code type="php">
// variable substitution
$greeting = "Hello $name, welcome back!";
</code>

* Strings may be concatenated using the "." operator. A space must always be added before and after the "." operator to improve readability:

<code type="php">
// concatenation
$framework = 'Doctrine' . ' ORM ' . 'Framework';
</code>

* When concatenating strings with the "." operator, it is permitted to break the statement into multiple lines to improve readability. In these cases, each successive line should be padded with whitespace such that the "."; operator is aligned under the "=" operator:

<code type="php">
// concatenation line breaking
$sql = "SELECT id, name FROM user "
     . "WHERE name = ? "
     . "ORDER BY name ASC";
</code>


+++ Arrays

* Negative numbers are not permitted as indices.
* An indexed array may be started with any non-negative number, however this is discouraged and it is recommended that all arrays have a base index of 0.
* When declaring indexed arrays with the array construct, a trailing space must be added after each comma delimiter to improve readability.
* It is also permitted to declare multiline indexed arrays using the "array" construct. In this case, each successive line must be padded with spaces.
* When declaring associative arrays with the array construct, it is encouraged to break the statement into multiple lines. In this case, each successive line must be padded with whitespace such that both the keys and the values are aligned:

<code type="php">
$sampleArray = array('Doctrine', 'ORM', 1, 2, 3);


$sampleArray = array(1, 2, 3, 
                     $a, $b, $c,                     
                     56.44, $d, 500);


$sampleArray = array('first'  => 'firstValue',
                     'second' => 'secondValue');
</code>


+++ Classes

* Classes must be named by following the naming conventions.
* The brace is always written next line after the class name (or interface declaration).
* Every class must have a documentation block that conforms to the PHPDocumentor standard.
* Any code within a class must be indented four spaces.
* Only one class is permitted per PHP file.
* Placing additional code in a class file is NOT permitted. 

This is an example of an acceptable class declaration:

<code type="php">
/**
 * Documentation here
 */
class Doctrine_SampleClass 
{
    // entire content of class
    // must be indented four spaces
}
</code>


+++ Functions and methods

* Methods must be named by following the naming conventions.
* Methods must always declare their visibility by using one of the private, protected, or public constructs.
* Like classes, the brace is always written next line after the method name. There is no space between the function name and the opening parenthesis for the arguments.
* Functions in the global scope are strongly discouraged.
* This is an example of an acceptable function declaration in a class:

<code type="php">
/**
 * Documentation Block Here
 */
class Foo 
{
    /**
     * Documentation Block Here
     */
    public function bar() 
    {
        // entire content of function
        // must be indented four spaces
    }
}
</code>

* Passing by-reference is permitted in the function declaration only:

<code type="php">
/** 
 * Documentation Block Here 
 */
class Foo 
{
    /**
     * Documentation Block Here
     */
    public function bar(&$baz) 
    {
    }
}
</code>

* Call-time pass by-reference is prohibited.
* The return value must not be enclosed in parentheses. This can hinder readability and can also break code if a method is later changed to return by reference.

<code type="php">
/** 
 * Documentation Block Here 
 */
class Foo 
{
    /**     
     * WRONG     
     */    
    public function bar() {
        return($this->bar);
    }    
    /**     
     * RIGHT     
     */    
    public function bar() 
    {
        return $this->bar;
    }
}
</code>

* Function arguments are separated by a single trailing space after the comma delimiter. This is an example of an acceptable function call for a function that takes three arguments:

<code type="php">
threeArguments(1, 2, 3);
</code>

* Call-time pass by-reference is prohibited. See above for the proper way to pass function arguments by-reference.
* For functions whose arguments permitted arrays, the function call may include the {{array}} construct and can be split into multiple lines to improve readability. In these cases, the standards for writing arrays still apply:

<code type="php">
threeArguments(array(1, 2, 3), 2, 3);

threeArguments(array(1, 2, 3, 'Framework',
                     'Doctrine', 56.44, 500), 2, 3);
</code>


+++ Control statements

* Control statements based on the {{if}} and {{elseif}} constructs must have a single space before the opening parenthesis of the conditional, and a single space after the closing parenthesis.
* Within the conditional statements between the parentheses, operators must be separated by spaces for readability. Inner parentheses are encouraged to improve logical grouping of larger conditionals.
* The opening brace is written on the same line as the conditional statement. The closing brace is always written on its own line. Any content within the braces must be indented four spaces.

<code type="php">
if ($foo != 2) {
    $foo = 2;
}
</code>

* For {{if}} statements that include {{elseif}} or {{else}}, the formatting must be as in these examples:

<code type="php">
if ($foo != 1) {
    $foo = 1;
} else {   
    $foo = 3;
}
if ($foo != 2) {
    $foo = 2;
} elseif ($foo == 1) {
    $foo = 3;
} else {   
    $foo = 11;
}
</code>

When ! operand is being used it must use the following formatting:

<code type="php">
if ( ! $foo) {

}
</code>

* Control statements written with the {{switch}} construct must have a single space before the opening parenthesis of the conditional statement, and also a single space after the closing parenthesis.
* All content within the {{switch}} statement must be indented four spaces. Content under each {{case}} statement must be indented an additional four spaces but the breaks must be at the same indentation level as the {{case}} statements.

<code type="php">
switch ($case) {
    case 1:
    case 2:
    break;
    case 3:
    break;
    default:
    break;
}
</code>

* The construct default may never be omitted from a switch statement.


+++ Inline documentation

Documentation Format:

* All documentation blocks ("docblocks") must be compatible with the phpDocumentor format. Describing the phpDocumentor format is beyond the scope of this document. For more information, visit: http://phpdoc.org/

Methods:

* Every method, must have a docblock that contains at a minimum: 
 * A description of the function
 * All of the arguments
 * All of the possible return values
* It is not necessary to use the {{@access}} tag because the access level is already known from the {{public}}, {{private}}, or {{protected}} construct used to declare the function.
* If a function/method may throw an exception, use {{@throws}}:
 * {{@throws exceptionclass [description]}}

