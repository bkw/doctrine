++ 導入

スキーマファイルの目的はphpコードを編集するよりもyamlファイルから直接モデル定義を管理できるようにすることです。yamlスキーマファイルは解析されすべてのモデル定義/クラスを生成するために使われます。これによってDoctrineのモデル定義がずっとポータブルになります。

スキーマファイルは接続バインディングへのコンポーネント、リレーションシップ、属性、テンプレート/振る舞い、インデックスなどphpコードを手作業で書くすべての通常の内容をサポートします。

++ リレーションシップ

リレーションシップを指定するとき外部キーが存在する最後の場所でリレーションシップを指定することだけが必要です。両方の方法がサポートされています。

+++ 一対一

<code type="yaml">
---
User:
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: string(255)
  relations:
    Contact:
      foreignType: one
Contact:
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    name:
      type: string(255)
</code>

+++ 一対多

<code type="yaml">
---
User:
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
Phonenumber:
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    name:
      type: string(255)
    user_id:
      type: integer(4)
  relations:
    User:
      foreignAlias: Phonenumbers
</code>

+++ 多対多

<code type="yaml">
User:
  columns:
    id:
      type: integer(4)
      autoincrement: true
      primary: true
    username:
      type: string(255)
    password:
      type: string(255)
  attributes:
    export: all
    validate: true
Group:
  tableName: group_table
  columns:
    id:
      type: integer(4)
      autoincrement: true
      primary: true
    name:
      type: string(255)
  relations:
    Users:
      foreignAlias: Groups
      class: User
      refClass: GroupUser
GroupUser:
  columns:
    group_id:
      type: integer(4)
      primary: true
    user_id:
      type: integer(4)
      primary: true
</code>

++ 接続バインディング

<code type="php">
Doctrine::connection('mysql://jwage:pass@localhost/connection1', 'connection1');
</code>

<code type="yaml">
---
User:
  connection: connection1
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
</code>

++ 属性

<code type="yaml">
---
User:
  connection: connection1
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
  attributes:
    export: none
    validate: false
</code>

++ テンプレート

<code type="yaml">
---
User:
  connection: connection1
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
  templates:
    MyCustomTemplate
      option1: value
      option2: value
</code>

++ ActAs

<code type="yaml">
---
User:
  connection: connection1
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
  actAs:
    Sluggable:
      fields: [username]
</code>

++ オプション

<code type="yaml">
---
User:
  connection: connection1
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    contact_id:
      type: integer(4)
    username:
      type: string(255)
    password:
      type: stirng(255)
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8
</code>

++ インデックス

インデックスとオプションに関する詳細な情報は[doc basic-schema-mapping :index :name]をご覧いただけるようお願いします。

schema.yml
<code type="yml">
---
UserProfile:
  columns:
    user_id:
      type: integer
      length: 4
      primary: true
      autoincrement: true
    first_name:
      type: string
      length: 20
    last_name:
      type: string
      length: 20
  indexes:
    name_index:
      fields:
        first_name:
          sorting: ASC
          length: 10
          primary: true
        last_name: []
      type: unique
</code>

基底モデルクラスのsetTableDefinition()内部に自動生成されるコードのPHPの行です。

<code type="php">
$this->index('name_index', array('fields' => array('first_name' => array( 'sorting' => 'ASC', 'length' => '10', 'primary' => true ), 'last_name' => array( ) ), 'type' => 'unique'));
</code>

++ 継承

<code type="yaml">
---
Entity:
  actAs: [Timestampable]
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    username:
      type: string(255)
    password:
      type: string(255)
User:
  inheritance:
    extends: Entity
Group:
  inheritance:
    extends: Entity
</code>

++ モデルを生成する

いったんスキーマファイルを定義すると必要なコードは次のようになります

<code type="php">
// オプションは完全に任意。モデル生成のためにデフォルトの構成を超えて必要なものがある場合は次の内容のみを使う
$options = array('packagesPrefix'        =>  'Package',             // 真ん中のパッケージモデルにつける接頭辞
                 'packagesPath'          =>  '',                    // このデフォルトは"#models_path#/packages"
                 'generateBaseClasses'   =>  true,                  // 定義と空の抽象基本クラスを拡張するトップレベルを含む抽象基本クラスを生成するかどうか
                 'generateTableClasses'  =>  true,                  // それぞれのモデルに対してテーブルクラスを生成するか
                 'baseClassesDirectory'  =>  'generated',           // 抽象基本クラスを生成するフォルダの名前
                 'baseClassName'         =>  'Doctrine_Record',     // 抽象基本クラスのDoctrine_Recordクラスの名前
                 'suffix'                =>  '.php');               // 生成されたコードに対する拡張子

// このコードは/path/to/generate/modelsでschema.ymlに対してモデルを生成する
Doctrine::generateModelsFromYaml('schema.yml', '/path/to/generate/models', $options);
</code>
