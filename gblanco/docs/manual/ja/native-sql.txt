++ 序文

Doctrine_RawSqlは生のSQLクエリーをビルドするために便利なインターフェイスを提供します。Doctrine_Queryと同様に、Doctrine_RawSqlは provides means for fetching arrays and objects, the way you prefer.

取得するために生のSQLを使うことはクエリーヒントもしくはOracleのCONNECTキーワードといったデータベース特有の機能を利用したい場合に便利です。

Doctrine_RawSqlオブジェクトの作成は簡単です:

<code type="php">
$q = new Doctrine_RawSql();
</code>

オプションとして接続パラメータは次のように与えられます:

<code type="php">
$q = new Doctrine_RawSql($conn); // ここでは$connはDoctrine_Connectionのインスタンス
</code>

++ コンポーネントクエリー

The first thing to notice when using Doctrine_RawSqlを使うときに最初に注意することは選択しているフィールドを中括弧 {}に設置しなければならないことです。またすべての選択されたコンポーネントに対してaddComponent()を呼び出さなければなりません。

次の例はこれらの使い方を明確にします:

<code type="php">
$q = new Doctrine_RawSql();

$q->select('{u.*}')
  ->from('user')
  ->addComponent('user', 'User'); // ここではuserテーブルは'User'というクラスに結びつけられる

$users = $q->execute();
$user[0]; // Userオブジェクト
</code>

次のことに注意を払って下さい:

# フィールドは中括弧内になければなりません
# すべての選択されたテーブルに対してaddComponentコールが一つ存在しなければなりません


++ 複数のコンポーネントから取得する

複数のコンポーネントから取得するときaddComponentコールは少し複雑になります。それはどのテーブルがどのコンポーネントに対応するのか私達が伝えなければならないだけでなく、どのコンポーネントがどこに所属するのかパーサーに津炊けなければならないからです。

次のモデルを考えて下さい:

<code type="php">
// User.phpファイル
class User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('name', 'string', 20);
    }
    public function setUp()
    {
        $this->hasMany('Phonenumber', array('local' => 'id',
                                            'foreign' => 'user_id'));
    }
}
// Phonenumber.phpファイル
class Phonenumber extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('phonenumber', 'string', 20);
        $this->hasColumn('user_id', 'integer');
    }
    public function setUp()
    {
        $this->hasOne('User', array('local' => 'user_id',
                                    'foreign' => 'id',
                                    'onDelete' => 'CASCADE'));
    }
}
</code>

次の例においてすべてのユーザーと彼らの電話番号を取得します:

<code type="php">
$q = new Doctrine_RawSql();

$q->select('{u.*}, {p.*}')
  ->from('user u LEFT JOIN phonenumber p ON u.id = p.user_id')
  // ここではuserテーブルは'User'クラスに対応することを伝える
  // Userクラスに対して'u'のエイリアスも追加する
  // このエイリアスはUserクラスに参照するときに使われる
  ->addComponent('u', 'User u')
  // ここではphonenumberテーブルに対応する別のコンポーネントを追加する
  // Phonenumberクラスが"User's phonenumber"であることをどのように参照するか注目する
  ->addComponent('p', 'u.Phonenumber p');


$users = $q->execute();
$users[0]; // Userオブジェクト
</code>
