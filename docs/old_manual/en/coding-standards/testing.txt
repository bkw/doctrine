Doctrine is programmatically tested using UnitTests - see http://en.wikipedia.org/wiki/Unit_testing.

+++ Running tests

In order to run the tests that come with doctrine you need to check out the entire project, not just the lib folder.

++++ CLI

To run tests on the command line, you must have php-cli installed.

Navigate to the DOCTRINE_PATH/tests folder and run the following command:

<code>
php run.php
</code>

This should print out a progress indicator and a report of any test failures.

The CLI testrunner has several options for coverage reports, running a group of tests, and filtering tests against classnames of testsuites.  Run "php run.php -help" for more details on these options.


++++ Browser

You can run the unit tests in the browser by navigating to doctrine/tests/run.php.  Options can be set through _GET variables.

For example:
* http://example.com/doctrine/tests/run.php
* http://example.com/doctrine/tests/run.php?filter=Limit&group[]=query&group[]=record

+++ Writing tests

When writing your test case, you can copy {{TemplateTestCase.php}} to start off.  Include your test in run.php:

<code type="php">
$test->addTestCase(new Doctrine_Sample_TestCase());
</code>

Here is a sample test case:

<code type="php">
<?php
class Doctrine_Sample_TestCase extends Doctrine_UnitTestCase 
{
    public function prepareTables()
    {
        $this->tables[] = "MyModel1";
        $this->tables[] = "MyModel2";
        parent::prepareTables();
    }
    
    public function prepareData()
    {
      $this->myModel = new MyModel1();
      //$this->myModel->save();
    }

    public function testInit()
    {

    }

    // This produces a failing test
    public function testTest()
    {
        $this->assertTrue($this->myModel->exists());
        $this->assertEqual(0, 1);
        $this->assertIdentical(0, '0');
        $this->assertNotEqual(1, 2);
        $this->assertTrue((5 < 1));
        $this->assertFalse((1 > 2));
    }
}

// You can optionally put your model classes right in the test, or put them in the models folder and they will be autoloaded.

class Model1 extends Doctrine_Record
{
}

class Model2 extends Doctrine_Record
{
}
</code>

If you execute run.php you should you see your failing test.

++++ Methods for testing

<code type="php">
public function assertEqual($value, $value2)
public function assertIdentical($value, $value2)
public function assertNotEqual($value, $value2)
public function assertTrue($expr)
public function assertFalse($expr)
</code>


++++ Mock drivers

Doctrine uses mock drivers for all drivers other than sqlite. The following code snippet shows you how to use mock drivers:

<code type="php">
<?php
class Doctrine_Sample_TestCase extends Doctrine_UnitTestCase 
{
    public function testInit()
    {
        $this->dbh = new Doctrine_Adapter_Mock('oracle');
        $this->conn = Doctrine_Manager::getInstance()->openConnection($this->dbh);
    }
}
</code>


++++ Test Class Guidelines

* Every class should have at least one {{TestCase}} equivalent
* All testcase classes should inherit {{Doctrine_UnitTestCase}}

Test classes should refer to a class or an aspect of a class, and they should be named accordingly.  Some examples:

* {{Doctrine_Record_TestCase}} is a good name because it refers to the {{Doctrine_Record}} class
* {{Doctrine_Record_State_TestCase}} is also good, because it refers to the state aspect of the {{Doctrine_Record}} class.
* {{Doctrine_PrimaryKey_TestCase}} is a bad name, because it's too generic.

++++ Test Method Guidelines

* Methods should support agile documentation
* Test methods should be named so that if it fails, it is obvious what failed.
* Test method names should give information of the system they test
* Example: {{Doctrine_Export_Pgsql_TestCase::testCreateTableSupportsAutoincPks()}} is a good test name
* Test method names can be long, but the method content should not be.  If you need several assert-calls, divide the method into smaller methods.
* There should never be assertions within any loops, and rarely within functions.

NOTE: Commonly used testing method naming convention {{TestCase::test[methodName]}} is **not** allowed in Doctrine.  So in this case {{Doctrine_Export_Pgsql_TestCase::testCreateTable()}} would not be allowed!
