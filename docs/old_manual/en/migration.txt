The Doctrine Migration tools allow you to migrate databases and it issues alter table statements 
directly to your databases when you need to deploy database changes.

++ Writing Migration Classes

Migration classes consist of a simple class that extends from Doctrine_Migration. You can define 
a public up() and down() method that is meant for doing and undoing changes to a database for that 
migration step. The class name is completely arbitrary, but the name of the file which contains the 
class must have a prefix containing the number it represents in the migration process. 
Example: XXX_representative_name.class.php

<code type="php">
// 001_add_table.class.php
class AddTable extends Doctrine_Migration
{
    public function up()
    {
        $this->createTable('migration_test', array('field1' => array('type' => 'string')));
    }
    
    public function down()
    {
        $this->dropTable('migration_test');
    }
}

// 002_add_column.class.php
class AddColumn extends Doctrine_Migration
{
    public function up()
    {
        $this->addColumn('migration_test', 'field1', 'string');
    }
    
    public function down()
    {
        $this->renameColumn('migration_test', 'field1', 'field2');
    }
}

// 003_change_column.class.php
class ChangeColumn extends Doctrine_Migration
{
    public function up()
    {
        $this->changeColumn('migration_test', 'field1', 'integer');
    }
    
    public function down()
    {
        $this->changeColumn('migration_test', 'field1', 'string');
    }  
}
</code>

+++ Methods

Here is a list of the available methods you can use to alter your database in your migration classes

Create a new table

<code type="php">
// Name of the table to create
$tableName = 'new_table';

// Sample array of fields for the table
$fields = array('id' => array(
                    'type' => 'integer',
                    'unsigned' => 1
                    'notnull' => 1
                    'default' => 0
                ),
                'name' => array(
                    'type' => 'text',
                    'length' => 12
                ),
                'password' => array(
                    'type' => 'text',
                    'length' => 12
                ));

// Array of table options
$options = array('type'     => 'INNODB',
                 'charset'  => 'utf8');

$this->createTable($tableName, $fields, $options);
</code>

Drop an existing table

<code type="php">
// Name of the table to drop
$tableName = 'new_table';
$this->dropTable($tableName);
</code>

Rename an existing table

<code type="php">
// Old name of table
$oldTableName = 'users';

// New name of table
$newTableName = 'user';

$this->renameTable($oldTableName, $newTableName);
</code>

Create a new database constraint

<code type="php">
// Name of the table to create the constraint on
$tableName = 'user';

// Name of the constraint to create
$constraintName = 'unique_username';

// Definition array
$definition = array('fields' => array('username' => array())
                    'unique' => true); // 'primary' => true

$this->createConstraint($tableName, $constraintName, $definition);
</code>

<code type="php">
// Name of the table where the constraint lives
$tableName = 'user';

// Name of the constraint to drop
$constraintName = 'unique_username';

// Whether or not this constraint is a primary constraint
$primary = false;

$this->dropConstraint($tableName, $constraintName, $primary = false);
</code>

Create a foreign key

<code type="php">
// Name of the table to create the foreign key on
$tableName = 'user';

// Definition of the foreign key
$definition = array('name'          => 'email_foreign_key'
                    'local'         => 'email_id',
                    'foreign'       => 'id',
                    'foreignTable'  => 'email',
                    'onDelete'      => 'CASCADE');
     
$this->createForeignKey($tableName, $definition);
</code>

The valid options for the $definition are:

|| key          || description ||
|| name         || optional constraint name ||
|| local        || the local field(s) ||
|| foreign      || the foreign reference field(s) ||
|| foreignTable || the name of the foreign table ||
|| onDelete     || referential delete action ||
|| onUpdate     || referential update action ||
|| deferred     || deferred constraint checking ||

Drop a foreign key

<code type="php">
// Name of the table where the foreign key exists
$tableName = 'user';

// Name of the foreign key
$fkName = 'email_foreign_key';

$this->dropForeignKey($tableName, $fkName);
</code>

Add a new column to a table

<code type="php">
// Name of the table to add the column to
$tableName = 'user';

// Name of the column to add
$columnName = 'email_address';

// Data type for column
$type = 'string';

// Array of options for column
$options = array('length' => '255');

$this->addColumn($tableName, $columnName, $type, $options);
</code>

Rename an existing column on a table

<code type="php">
// Name of the table where the column to rename exists
$tableName = 'user';

// Old name of the column
$oldColumnName = 'login';

// New name of the column
$newColumnName = 'username';

$this->renameColumn($tableName, $oldColumnName, $newColumnName);
</code>

Change any aspect of an existing column

<code type="php">
// Name of the table where the column to change exists
$tableName = 'user';

// Name of the column to change
$columnName = 'is_active';

// Type to change the column to
$type = 'tinyint';

// Array of options to change for the column
$options = array('length' => 1);

$this->changeColumn($tableName, $columnName, $type, $options);
</code>

Remove an existing column from a table

<code type="php">
// Name of the table where the column to remove exists
$tableName = 'user';

// Name of the column to remove
$columnName = 'num_logins';

$this->removeColumn($tableName, $columnName)
</code>

Add an index to a table

<code type="php">
// Name of the table to create the index on
$tableName = 'user';

// Name of the index to create
$indexName = 'username_last_loginx';

$options = array('fields' => array(
                    'username' => array(
                        'sorting' => 'ascending'
                    ),
                    'last_login' => array()));

$this->addIndex($tableName, $indexName, array $options = array())
</code>

Remove an existing index from a table

<code type="php">
// Name of the table to remove the index from
$tableName = 'user';

// Name of the index to remove
$indexName = 'username_last_loginx';

$this->removeIndex($tableName, $indexName)
</code>

+++ Altering Data

Sometimes you may need to alter the data in the database with your models. Since you may create a table 
or make a change, you have to do the data altering after the up() or down() method is processed. We have 
hooks in place for this named preUp(), postUp(), preDown(), and postDown(). Define these methods and 
they will be triggered after the migration version is executed.

<code type="php">
// XXX_add_user.class.php
class AddUser extends Doctrine_Migration
{
    public function up()
    {
        $this->createTable('migration_test', array('field1' => array('type' => 'string')));
    }
    
    public function postUp()
    {
      $migrationTest = new MigrationTest();
      $migrationTest->field1 = 'test';
      $migrationTest->save();
    }

    public function down()
    {
        $this->dropTable('migration_test');
    }
    
    public function postDown()
    {
        $migrationTest = Doctrine::getTable('MigrationTest')->findOneByField1('test');
        $migrationTest->delete();
    }
}
</code>

++ Performing Migrations

<code type="php">
$migration = new Doctrine_Migration('/path/to/migration_classes');

// Assume current version is 0
$migration->migrate(3); // takes you from 0 to 3
$migration->migrate(0); // takes you from 3 to 0

echo $migration->getCurrentVersion(); // 0
</code>

This functionality is can also be accessed from the Doctrine command line interface.