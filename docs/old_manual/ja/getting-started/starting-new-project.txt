Doctrine_RecordはすべてのDoctrineを使ったプロジェクトの基本コンポーネントになります。少なくともそれぞれのデータベーステーブルに対してDoctrine_Recordが一つあります。Doctrine_Record は [http://www.martinfowler.com/eaaCatalog/activeRecord.html Active Record pattern] のパターンを継承しています。

Doctrineは常に主キーを持たないテーブルに対して'id'という名前の主キーを追加します。Doctrine_Record を継承してsetTableDefinitionメソッドをhasColumn()で定義してそれらのクラスをエクスポートするだけでデータベースのテーブルが作成されます。

'user'というデータベーステーブルを作成することを考えてみます。カラムはid(primary key)、name、username、passwordとcreatedです。Doctrineが既にインストールされているとして、必要なものは下記の数行です:

User.php :
<code type="php">
class User extends Doctrine_Record 
{
    public function setTableDefinition() 
    {
        // set 'user' table columns, note that
        // id column is auto-created as no primary key is specified
        
        $this->hasColumn('name', 'string',30);
        $this->hasColumn('username', 'string',20);
        $this->hasColumn('password', 'string',16);
    }
    
    public function setUp()
    {
        $this->actAs('Timestampable');
    }
}
</code>

この代わりにYAMLスキーマを使ってDoctrineのスキーマ情報を指定することも可能です。以下がDoctrine_Recordから生成するためのuser.ymlの例です

<code type="yml">
---
User:
  actAs: [Timestampable]
  columns:
    name: string(30)
    username: string(20)
    password: string(16)
</code>

以下のコマンドを走らせてyamlからphpこーどを生成することができます

<code type="php">
Doctrine::generateModelsFromYaml('/path/to/user.yml', '/path/to/generate/models);
</code>

パス /path/to/generate/models/ か /path/to/generate/models/generated を見てください。ここにUser.phpとBaseUser.phpがあるはずです。User.phpにこーどを追加することで任意の機能を追加することができます。まだBaseUser.phpにはYAMLスキーマファイルから毎回生成されます。

これでDoctrine_Recordクラスが使えるようになりました、ここからデータベースにエクスポートしたり、テーブルを作成したりできます。上のUserクラスをデータベースにエクスポートするために次のシンプルなビルドスクリプトを使います：


<code type="php">
//Doctrineのベースクラスを読み込む
require_once('path-to-doctrine/lib/Doctrine.php');

//autoloaderの登録
spl_autoload_register(array('Doctrine', 'autoload'));

require_once('User.php');

//接続のセットアップ
Doctrine_Manager::connection('mysql://user:pass@localhost/test');

//クラスのエクスポート
Doctrine::createTablesFromArray(array('User'));
</code>

これで基本的なCRUDオペレーションをサポートするUserモデルが使えるようになりました！
