++ データベースを作成する＆削除する

Doctrineは定義されたDoctrineの接続からデータベースの作成と削除する能力を提供します。これを使う唯一のトリックはDoctrine接続の名前はデータベースの名前でなければなりません。これはPDOが接続するデータベースの名前を取得するためのメソッドを提供しない事実によるものです。データベースの作成と削除をするためにDoctrine自身はデータベースの名前を知っていなければなりません。

++ 便利なメソッド

DoctrineはメインのDoctrineクラスで利用可能なスタティックで便利なメソッドを提供します。これらのメソッドは一つのメソッドを持つDoctrineのもっとも使用される機能性の一部を実行します。これらのメソッドの多くはDoctrine_Taskシステムで使用されています。これらのタスクはDoctrine_Cliから実行されるものでもあります。

<code type="php">
// デバッグをオン/オフしてそれをオン/オフをするかを確認する
Doctrine::debug(true);

if (Doctrine::debug()) {
    echo 'debugging is on';
} else {
    echo 'debugging is off';
}

// Doctrineライブラリのパスを取得する
$path = Doctrine::getPath();

// Doctrineと動作させるためにモデルをロードする
// 見つかりロードされたDoctrine_Recordsの配列を返す
$models = Doctrine::loadModels('/path/to/models');
print_r($models);

// Doctrineに読み込まれ示されたすべてのモデルの配列を取得する
$models = Doctrine::getLoadedModels();

// クラスの配列を上記のメソッドに渡しDoctrine_Recordsではないものを取り除く
$models = Doctrine::getLoadedModels(array('User', 'Formatter', 'Doctrine_Record'));
print_r($models); // Formatterと Doctrine_RecordはDoctrine_Recordsではないのでarray('User')を返す。

// 一切のテーブル名に対してDoctrine_Connectionオブジェクトを取得する
$conn = Doctrine::getConnectionByTableName('user'); // returns the connection object that the table name is associated with

// 既存のデータベースからモデルを生成する
Doctrine::generateModelsFromDb('/path/to/generate/models');

// 既存のデータベースからYAMLスキーマを生成する
Doctrine::generateYamlFromDb('/path/to/dump/schema.yml');

// YAMLスキーマからモデルを生成する
Doctrine::generateModelsFromYaml('/path/to/schema.yml', '/path/to/generate/models');

// 既存のモデルのセットからすべてのテーブルを作成する
Doctrine::createTablesFromModels('/path/to/models');

// 配列で提供されたテーブルを作成する
Doctrine::createTablesFromArray(array('User', 'Phoneumber'));

// 既存のモデルのセットからSQLコマンドの文字列を生成する
Doctrine::generateSqlFromModels('/path/to/models');

// 既存のモデルのセットからYAMLスキーマを生成する
Doctrine::generateYamlFromModels('/path/to/schema.yml', '/path/to/models');

// 動作する下記のdrop/createの機能性のために順番にデータベースとして同じ接続名が要求される。

// 接続に対してすべてのデータベースを作成する。
Doctrine::createDatabases();

// 接続に対してすべてのデータベースを削除する。
Doctrine::dropDatabases();

// モデルのためにすべてのデータをYAMLフィクスチャファイルにダンプする
// 2番目の引数はbool値でそれぞれのモデルに対して個別のフィクスチャファイルを生成するかどうかを決めるため。trueの場合ファイルの代わりにフォルダを指定する必要がある。
Doctrine::dumpData('/path/to/dump/data.yml', true);

// YAMLフィクスチャファイルからデータをロードする
// 2番目の引数はbool値でロードする前にデータを追加するかどうかもしくはロードする前に最初にすべてのデータを削除するかどうかを決定する
Doctrine::loadData('/path/to/fixture/files', true);

// マイグレーションクラスのセットに対してマイグレーションプロセスを実行する
$num = 5; // バージョン#5に移行する
Doctrine::migration('/path/to/migrations', $num);

// 空白のマイグレーションクラスのテンプレートを生成する
Doctrine::generateMigrationClass('ClassName', '/path/to/migrations');

// 既存のデータベースに対してすべてのマイグレーションクラスを生成する
Doctrine::generateMigrationsFromDb('/path/to/migrations');

// 既存のモデルのセットに対してすべてのマイグレーションクラスを生成する
// 2番目の引数は;padModels()を使ってすでにモデルをロードしている場合はオプション
Doctrine::generateMigrationsFromModels('/path/to/migrations', '/path/to/models');

// モデルのためにDoctrine_Tableのインスタンスを入手する
$userTable = Doctrine::getTable('User');

// Doctrineを単独のPHPファイルにコンパイルする
$drivers = array('mysql'); // このコンパイルされたバージョンでインクルードしたいドライバの配列を指定する
Doctrine::compile('/path/to/write/compiled/doctrine', $drivers);

// デバッグをするためにDoctrineのオブジェクトをダンプする
$conn = Doctrine_Manager::connection();
Doctrine::dump($conn);
</code>

++ タスク

タスクはコアの便利なメソッドのいくつかをまとめたもので、要求された引数を設定することで簡単に実行できます。これらのタスクはDoctrineのコマンドラインのインターフェイスで直接使用されます。

<code>
BuildAll
BuildAllLoad
BuildAllReload
Compile
CreateDb
CreateTables
Dql
DropDb
DumpData
Exception
GenerateMigration
GenerateMigrationsDb
GenerateMigrationsModels
GenerateModelsDb
GenerateModelsYaml
GenerateSql
GenerateYamlDb
GenerateYamlModels
LoadData
Migrate
RebuildDb
</code>

下記のセクションで独自のスクリプトでDoctrineのタスクをスタンドアロンで実行する方法が説明されています。

++ コマンドラインインターフェイス

+++ 紹介
DoctrineのCliはタスクのコレクションで、Doctrineで開発とテストの手助けになります。このマニュアルのよくある例で必要なタスクは何でも実行するPHPスクリプトをセットアップします。このCliツールはこれらのタスクに対してそのまま使える解決方法を提供することを目的としています。

+++ タスク
下記のリストはDoctrineの実装を管理するための利用可能なタスクの一覧です。

<code>

./cli build-all
./cli build-all-load
./cli build-all-reload
./cli compile
./cli create-db
./cli create-tables
./cli dql
./cli drop-db
./cli dump-data
./cli generate-migration
./cli generate-migrations-from-db
./cli generate-migrations-from-models
./cli generate-models-from-db
./cli generate-models-from-yaml
./cli generate-sql
./cli generate-yaml-from-db
./cli generate-yaml-from-models
./cli load-data
./cli migrate
./cli rebuild-db

</code>

CLIに対するタスクはCLIから分離されスタンドアロンで使用できます。下記は例です。

<code type="php">
$task = new Doctrine_Task_GenerateModelsFromYaml();

$args = array('yaml_schema_path' => '/path/to/schema',
              'models_path'      => '/path/to/models');

$task->setArguments($args);

try {
  if ($task->validate()) {
    $task->execute();
  }
} catch (Exception $e) {
  throw new Doctrine_Exception($e->getMessage());
}
</code>

+++ 使い方

実行するために設定された"cli"という名前のファイルです。

<code>
#!/usr/bin/env php
<?php
chdir(dirname(__FILE__));
include('cli.php');
</code>

Doctrine_Cliを実装する"cli.php"という名前の実際のPHPファイルです。
<code type="php">
// ここでのDoctrineの構成/セットアップ、接続、モデルなどをインクルードする

// Doctrine Cliを設定する
// cliのタスクが設定され引数が自動的に入力されそれらを入力するために要求されない場合、通常これらはcliタスクへの引数である。

$config = array('data_fixtures_path'  =>  '/path/to/data/fixtures',
                'models_path'         =>  '/path/to/models',
                'migrations_path'     =>  '/path/to/migrations',
                'sql_path'            =>  '/path/to/data/sql',
                'yaml_schema_path'    =>  '/path/to/schema');

$cli = new Doctrine_Cli($config);
$cli->run($_SERVER['argv']);
</code>

これでコマンドの実行を始めることができます。

<code>
./cli generate-models-from-yaml
./cli create-tables
</code>
