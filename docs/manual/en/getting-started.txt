++ Checking Requirements

First we need to make sure that you can run Doctrine on your server. We can do this one of two ways:

First create a small PHP script named {{phpinfo.php}} and upload it somewhere on your web server that is accessible to the web:

<code type="php">
phpinfo();
</code>

Now execute it from your browser by going to http://localhost/phpinfo.php. You will see a list of information detailing your PHP configuration. Check that your PHP version is >= //5.2.3// and that you have PDO and the desired drivers installed.

> **NOTE**
> You can also check your PHP installation has the necessary requirements by running some commands from the terminal. We will demonstrate in the next example.

Check that your PHP version is >= 5.2.3 with the following command:

<code>
$ php -v
</code>

Now check that you have PDO and the desired drivers installed with the following command:

<code>
$ php -i
</code>

You could also execute the {{phpinfo.php}} from the command line and get the same result as the above example:

<code>
$ php phpinfo.php
</code>

++ Installing

Currently it is possible to install Doctrine four different ways that are listed below:

* SVN (subversion)
* SVN externals
* PEAR Installer
* Download PEAR Package

It is recommended to download Doctrine via SVN (subversion), because in this case updating is easy. If your project is already under version control with SVN, you should choose SVN externals.

> **TIP**
> If you wish to just try out Doctrine in under 5 minutes, the sandbox package is recommended. We will discuss the sandbox package in the next section.

+++ Sandbox

Doctrine also provides a special package which is a zero configuration Doctrine implementation for you to test Doctrine without writing one line of code. You can download it from the [http://www.doctrine-project.org/download download page].

> **NOTE**
> The sandbox implementation is not a recommend implementation for a production application. It's only purpose is for exploring Doctrine and running small tests.

+++ SVN

It is highly recommended that you use Doctrine via SVN and the externals option. This option is the best as you will receive the latest bug fixes from SVN to ensure the best experience using Doctrine.

++++ Installing

To install Doctrine via SVN is very easy. You can download any version of Doctrine from the SVN server: http://svn.doctrine-project.org

To check out a specific version you can use the following command from your terminal:

<code>
svn co http://svn.doctrine-project.org/branches/1.0 .
</code>

If you do not have a SVN client, chose one from the list below. Find the Checkout option and enter http://svn.doctrine-project.org/1.0 in the path or repository url parameter. There is no need for a username or password to check out Doctrine.

* [http://tortoisesvn.tigris.org/ TortoiseSVN] a Windows application that integrates into Windows Explorer
* [http://www.apple.com/downloads/macosx/development_tools/svnx.html svnx] a Mac OS X GUI svn application
* [http://www.eclipse.org/ Eclipse] has SVN integration through the [http://subclipse.tigris.org/ subeclipse plugin]
* [http://versionsapp.com/ Versions] a subversion client for the mac

++++ Updating

Updating Doctrine with SVN is just as easy as installing. Simply execute the following command from your terminal:

<code>
$ svn update
</code>

+++ SVN Externals

If your project is already under version control with SVN, then it is recommended that you use SVN externals to install Doctrine.

You can start by navigating to your checked out project in your terminal:

<code>
$ cd /var/www/my_project
</code>

Now that you are under your checked out project, you can execute the following command from your terminal and setup Doctrine as an SVN external:

<code>
$ svn propedit svn:externals lib/vendor
</code>

The above command will open your editor and you need to place the following text inside and save:

<code>
doctrine http://svn.doctrine-project.com/branches/1.0/lib  
</code>

Now you can install Doctrine by doing an svn update:

<code>
$ svn update
</code>

It will download and install Doctrine at the following path: {{/var/www/my_project/lib/vendor/doctrine}}

> **TIP**
> Don't forget to commit your change to the SVN externals.

<code>
$ svn commit
</code>

+++ PEAR Installer

Doctrine also provides a PEAR server for installing and updating Doctrine on your servers. You can easily install Doctrine with the following command:

<code>
$ pear install pear.phpdoctrine.org/Doctrine-1.0.x
</code>

> **NOTE**
> Replace the above 1.0.x with the version you wish to install. For example "1.0.6".

+++ Download Pear Package

If you do not wish to install via PEAR or do not have PEAR installed, you can always just manually download the package from the [http://www.doctrine-project.org/download website]. Once you download the package to your server you can extract it using the following command under linux.

<code>
$ tar xzf Doctrine-1.0.6.tgz
</code>

++ Implementing

Now that you have Doctrine in your hands, we are ready to implement Doctrine in to our application. This is the first step towards getting started with Doctrine.

+++ Require Doctrine Base Class

The first thing we must do is find the {{Doctrine.php}} file containing the core class so that we can require it in to our application. The Doctrine.php file is in the lib folder from when you downloaded Doctrine in the previous section.

We need to create a php script for bootstrapping Doctrine and all the configuration for it. Create a file named {{bootstrap.php}} and place the following code in the file:

<code type="php">
// bootstrap.php

/**
 * Bootstrap Doctrine.php, register autoloader specify
 * configuration attributes and load models.
 */

require_once('/path/to/doctrine/lib/Doctrine.php');
</code>

+++ Register Autoloader

Now that we have the {{Doctrine}} class present, we need to register the class autoloader function in the bootstrap file:

<code type="php">
// bootstrap.php

// ...
spl_autoload_register(array('Doctrine', 'autoload'));
</code>

Lets also create the singleton {{Doctrine_Manager}} instance and assign it to a variable named {{$manager}}:

<code type="php">
// bootstrap.php

// ...
$manager = Doctrine_Manager::getInstance();
</code>

++++ Autoloading Explained

> **NOTE**
> You can read about the PHP autoloading on the php website [http://www.php.net/spl_autoload_register here]. Using the autoloader allows us to lazily load classes as they are requested instead of pre-loading all classes. This is a huge benefit to performance.

The way the Doctrine autoloader works is simple. Because our class names and paths are related, we can determine the path to a Doctrine class based on its name.

Imagine we have a class named {{Doctrine_Some_Class}} and we instantiate an instance of it:

<code type="php">
$class = new Doctrine_Some_Class();
</code>

The above code will trigger a call to the {{Doctrine::autoload()}} function and pass it the name of the class instantiated. The class name string is manipulated and transformed in to a path and required. Below is some pseudo code that shows how the class is found and required:

<code type="php">
class Doctrine
{
    public function autoload($className)
    {
        $classPath = str_replace('_', '/', $className) . '.php';
        $path = '/path/to/doctrine/' . $classPath;
        require_once($path);
        return true;
    }
}
</code>

In the above example the {{Doctrine_Some_Class}} can be found at {{/path/to/doctrine/Doctrine/Some/Class.php}}.

> **NOTE**
> Obviously the real {{Doctrine::autoload()}} function is a bit more complex and has some error checking to ensure the file exists but the above code demonstrates how it works.

+++ Bootstrap File

> **TIP**
> We will use this bootstrap class in later chapters and sections so be sure to create it!

The bootstrap file we have created should now look like the following:

<code type="php">
// bootstrap.php

/**
 * Bootstrap Doctrine.php, register autoloader specify
 * configuration attributes and load models.
 */

require_once('/path/to/doctrine/lib/Doctrine.php');
spl_autoload_register(array('Doctrine', 'autoload'));
$manager = Doctrine_Manager::getInstance();
</code>

This new bootstrapping file will be referenced several times in this book as it is where we will make changes to our implementation as we learn how to use Doctrine step by step.

> **NOTE**
> The configuration attributes mentioned above are a feature in Doctrine used for configuring and controlling functionality. You will learn more about attributes and how to get/set them in the [doc configuration :name] chapter.

+++ Test Script

Now lets create a simple test script that we can use to run various tests as we learn about the features of Doctrine. Create a directory named {{doctrine_test}} and copy your {{bootstrap.php}} file there:

<code>
$ mkdir doctrine_test
$ cp /path/to/bootstrap.php doctrine_test
</code>

Create a new file in the {{doctrine_test}} directory named {{test.php}} and place the following code inside:

<code type="php">
// test.php

require_once('bootstrap.php');

echo Doctrine::getPath();
</code>

Now you can execute the test script from your command line. This is how we will perform tests with Doctrine throughout the chapters so make sure it is working for you! It should output the path to your Doctrine installation.

<code>
$ php test.php 
/path/to/doctrine/lib
</code>

++ Conclusion

Phew! This was our first chapter where we actually got into some code. As you saw, first we were able to check that our server can actually run Doctrine. Then we learned all the different ways we can download and install Doctrine. Lastly we learned how to implement Doctrine by setting up a small test environment that we will use to perform some exercises in the remaining chapters of the book.

Now lets move on and get our first taste of Doctrine connections in the [doc introduction-to-connections :name] chapter.