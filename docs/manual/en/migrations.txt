The Doctrine migration package allows you to easily update your production databases through a nice programmatic interface. The changes are done in a way so that your database is versioned and you can walk backwards and forwards through the database versions.

++ Performing Migrations

Before we learn how to create the migration classes lets take a look at how we can run migrations so that we can implement them in our Doctrine test environment in the next section.

First lets create a new instance of {{Doctrine_Migration}} and pass it the path to our migration classes:

<code type="php">
$migration = new Doctrine_Migration('/path/to/migration_classes');
</code>

Now we can migrate to the latest version by calling the {{migrate()}} method:

<code type="php">
$migration->migrate();
</code>

If you want to migrate to a specific version you can pass an argument to {{migrate()}}. For example we can migrate to version 3 from 0:

<code type="php">
$migration->migrate(3);
</code>

Now you can migrate back to version 0 from 3:

<code type="php">
$migration->migrate(0);
</code>

If you want to get the current version of the database you can use the {{getCurrentVersion()}} method:

<code type="php">
echo $migration->getCurrentVersion();
</code>

> **TIP**
> Omitting the version number argument for the {{migrate()}} method means that internally Doctrine will try and migrate to the latest class version number that it could find in the directory you passed.

> **NOTE**
> **Transactions in Migrations**
> Internally Doctrine does not wrap migration versions in transactions. It is up to you as the developer to handle exceptions and transactions in your migration classes. Remember though, that very few databases support transactional DDL. So on most databases, even if you wrap the migrations in a transaction, any DDL statements like create, alter, drop, rename, etc., will take effect anyway. 

++ Implement

Now that we know how to perform migrations lets implement a little script in our Doctrine test environment named {{migrate.php}}.

First we need to create a place for our migration classes to be stored so lets create a directory named {{migrations}}:

<code>
$ mkdir migrations
</code>

Now create the {{migrate.php}} script in your favorite editor and place the following code inside:

<code type="php">
// migrate.php

require_once('bootstrap.php');

$migration = new Doctrine_Migration('migrations');
$migration->migrate();
</code>

++ Writing Migration Classes

Migration classes consist of a simple class that extends from {{Doctrine_Migration}}. You can define a {{up()}} and {{down()}} method that is meant for doing and undoing changes to a database for that migration version. 

> **NOTE**
> The name of the class can be whatever you want, but the name of the file which contains the class must have a prefix containing the version number of the database that class represents.

Below are a few examples of some migration classes you can use to build your database starting from version 1.

For the first version lets create a new table named {{migration_test}}:

<code type="php">
// migrations/001_add_table.php

class AddTable extends Doctrine_Migration
{
    public function up()
    {
        $this->createTable('migration_test', array('field1' => array('type' => 'string')));
    }
    
    public function down()
    {
        $this->dropTable('migration_test');
    }
}
</code>

Now lets create a second version where we add a new column to the table we added in the previous version:

<code type="php">
// migrations/002_add_column.php

class AddColumn extends Doctrine_Migration
{
    public function up()
    {
        $this->addColumn('migration_test', 'field2', 'string');
    }
    
    public function down()
    {
        $this->removeColumn('migration_test', 'field2';
    }
}
</code>

Finally, lets change the type of the {{field1}} column in the table we created previously:

<code type="php">
// migrations/003_change_column.php

class ChangeColumn extends Doctrine_Migration
{
    public function up()
    {
        $this->changeColumn('migration_test', 'field2', 'integer');
    }
    
    public function down()
    {
        $this->changeColumn('migration_test', 'field2', 'string');
    }  
}
</code>

Now that we have created the three migration classes above we can run our {{migrate.php}} script we implemented earlier:

<code>
$ php migrate.php
</code>

If you look in the database you will see that we have the table named {{migrate_test}} created and the version number in the {{migration_version}} is set to three.

If you want to migrate back to where we started you can pass a version number to the {{migrate()}} method in the {{migrate.php}} script:

<code type="php">
// migrate.php

// ...
$migration = new Doctrine_Migration('migrations');
$migration->migrate(0);
</code>

Now run the {{migrate.php}} script:

<code>
$ php migrate.php
</code>

If you look in the database now, everything we did in the {{up()}} methods has been reversed by the contents of the {{down()}} method.

+++ Available Operations

Here is a list of the available methods you can use to alter your database in your migration classes.

++++ Create Table

<code type="php">
// ...
    public function up()
    {
        $columns = array(
            'id' => array(
                'type' => 'integer',
                'unsigned' => 1
                'notnull' => 1
                'default' => 0
            ),
            'name' => array(
                'type' => 'text',
                'length' => 12
            ),
            'password' => array(
                'type' => 'text',
                'length' => 12
            )
        );

        $options = array(
            'type'     => 'INNODB',
            'charset'  => 'utf8'
        );

        $this->createTable('table_name', $columns, $options);
    }
// ...
</code>

> **NOTE**
> You might notice already that the data structures used to manipulate the your schema are the same as the data structures used with the database abstraction layer. This is because internally the migration package uses the database abstraction layer to perform the operations specified in the migration classes.

++++ Drop Table

<code type="php">
// ...
    public function down()
    {
        $this->dropTable('table_name');
    }
// ...
</code>

++++ Rename Table

<code type="php">
// ...
    public function up()
    {
        $this->renameTable('old_table_name', 'new_table_name');
    }
// ...
</code>

++++ Create Constraint

<code type="php">
// ...
    public function up()
    {
        $definition = array(
            'fields' => array(
                'username' => array()
            ),
            'unique' => true
        );

        $this->createConstraint('table_name', 'constraint_name', $definition);
    }
// ...
</code>

++++ Drop Constraint

**Now the opposite {{down()}} would look like the following:**

<code type="php">
// ...
    public function down()
    {
        $this->dropConstraint('table_name', 'constraint_name');
    }
// ...
</code>

++++ Create Foreign Key

<code type="php">
// ...
    public function up()
    {
        $definition = array(
            'name'          => 'email_foreign_key'
            'local'         => 'email_id',
            'foreign'       => 'id',
            'foreignTable'  => 'email',
            'onDelete'      => 'CASCADE'
        );

        $this->createForeignKey('table_name', $definition);
    }
// ...
</code>

The valid options for the {{$definition}} are:

||~ Name        ||~ Description ||
|| name         || Optional constraint name ||
|| local        || The local field(s) ||
|| foreign      || The foreign reference field(s) ||
|| foreignTable || The name of the foreign table ||
|| onDelete     || Referential delete action ||
|| onUpdate     || Referential update action ||
|| deferred     || Deferred constraint checking ||


++++ Drop Foreign Key

<code type="php">
// ...
    public function down()
    {
        $this->dropForeignKey('table_name', 'email_foreign_key');
    }
// ...
</code>

++++ Add Column

<code type="php">
// ...
    public function up()
    {
        $this->addColumn('table_name', 'column_name', 'string', $options);
    }
// ...
</code>

++++ Rename Column

> **NOTE**
> Some DBMS like sqlite do not implement the rename column operation. An exception is thrown if you try and rename a column when using a sqlite connection.

<code type="php">
// ...
    public function up()
    {
        $this->renameColumn('table_name', 'old_column_name', 'new_column_name');
    }
// ...
</code>

++++ Change Column

**Change any aspect of an existing column:**

<code type="php">
// ...
    public function up()
    {
        $options = array('length' => 1);
        $this->changeColumn('table_name', 'column_name', 'tinyint', $options);
    }
// ...
</code>

++++ Remove Column

<code type="php">
// ...
    public function up()
    {
        $this->removeColumn('table_name', 'column_name');
    }
// ...
</code>


++++ Irreversible Migration

> **TIP**
> Sometimes you may perform some operations in the {{up()}} method that cannot be reversed. For example if you remove a column from a table. In this case you need to throw a new {{Doctrine_Migration_IrreversibleMigrationException}} exception.

<code type="php">
// ...
    public function down()
    {
        throw new Doctrine_Migration_IrreversibleMigrationException(
            'The remove column operation cannot be undone!'
        );
    }
// ...
</code>

++++ Add Index

<code type="php">
// ...
    public function up()
    {
        $options = array('fields' => array(
                            'username' => array(
                                'sorting' => 'ascending'
                            ),
                            'last_login' => array()));

        $this->addIndex('table_name', 'index_name', $options)
    }
// ...
</code>

++++ Remove Index

<code type="php">
// ...
    public function down()
    {
        $this->removeIndex('table_name', 'index_name');
    }
// ...
</code>

+++ Pre and Post Hooks

Sometimes you may need to alter the data in the database with your models. Since you may create a table or make a change, you have to do the data altering after the {{up()}} or {{down()}} method is processed. We have hooks in place for this named {{preUp()}}, {{postUp()}}, {{preDown()}}, and {{postDown()}}. Define these methods and they will be triggered:

<code type="php">
// migrations/001_add_table.php

class AddTable extends Doctrine_Migration
{
    public function up()
    {
        $this->createTable('migration_test', array('field1' => array('type' => 'string')));
    }

    public function postUp()
    {
        $migrationTest = new MigrationTest();
        $migrationTest->field1 = 'Initial record created by migrations';
        $migrationTest->save();
    }

    public function down()
    {
        $this->dropTable('migration_test');
    }
}
</code>

> **NOTE**
> The above example assumes you have created and made available the {{MigrationTest}} model. Once the {{up()}} method is executed the {{migration_test}} table is created so the {{MigrationTest}} model can be used. We have provided the definition of this model below.

<code type="php">
// models/MigrationTest.php

class MigrationTest extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('field1', 'string');
    }
}
</code>

Here is the same example in YAML format. You can read more about YAML in the [doc yaml-schema-files :name] chapter:

<code type="yaml">
# schema.yml

# ...
MigrationTest:
  columns:
    field1: string
</code>

++ Conclusion

Using migrations is highly recommended for altering your production database schemas as it is a safe and easy way to make changes to your schema.

Migrations are the last feature of Doctrine that we will discuss in this book. The final chapters will discuss some other topics that will help you be a better Doctrine developers on a day-to-day basis. First lets discuss some of the other [doc utilities :name] that Doctrine provides.