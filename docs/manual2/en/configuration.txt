++ Introduction

Doctrine uses what we call attributes to control features and configuration. The 
attributes can be set at three different levels of the framework. This section 
will show you how you can set these attributes at each of the three levels.

++ Hierarchy

Doctrine has a three-level configuration structure. You can set configuration 
attributes in global, connection and table level. If the same attribute is set 
on both lower level and upper level, the uppermost attribute will always be 
used. So for example if user first sets default fetchmode in global level to 
`Doctrine::FETCH_BATCH` and then sets example table fetchmode to 
`Doctrine::FETCH_LAZY`, the lazy fetching strategy will be used whenever the 
records of 'example' table are being fetched.

+++ Global Level

The attributes set in global level will affect every connection and every table 
in each connection.

In the following example we set an attribute at the global level:

    [php]
    // setting a global level attribute
    $manager = Doctrine_Manager::getInstance();
    $manager->setAttribute(Doctrine::ATTR_VALIDATE, Doctrine::VALIDATE_ALL);

+++ Connection Level

The attributes set in connection level will take effect on each table in that 
connection.

In the next example above we override the global attribute on given connection.

    [php]
    // setting a connection level attribute
    // overrides the global level attribute for this connection
    $conn = Doctrine_Manager::connection(new PDO('dsn', 'username', 'pw'));
    $conn->setAttribute(Doctrine::ATTR_VALIDATE, Doctrine::VALIDATE_NONE);

+++ Table Level

The attributes set in table level will take effect only on that table.

In the last example we override once again the connection level attribute in 
the table level.

    [php]
    // setting a table level attribute
    // overrides the global and connection level attribute for this table
    $table = Doctrine::getTable('User');
    $table->setAttribute(Doctrine::ATTR_LISTENER, new UserListener());

You can also specify attributes in your `Doctrine_Record` child definitions. 
We will explain how to create these classes in the 
[Your RDBMS as PHP Classes](/documentation/manual/##SF_CULTURE##/##RELEASE_SLUG##/your-rdbms-as-php-classes) 
chapter later in this documentation.

    [php]
    class User extends Doctrine_Record
    {
        public function setTableDefinition()
        {
            $this->hasColumn('username', 'string', 255);
            $this->setAttribute(Doctrine::ATTR_LISTENER, new UserListener());
        }
    }

++ Optional String Syntax

You can optionally specify attribute names and values as strings. Below is an 
example. This is allowed as a convenience to shorten the syntax and make it 
easier to type.

    [php]
    $conn->setAttribute('validate', 'none');