Doctrine supports 3 types of inheritance strategies which can be mixed together.

++ Simple

Simple inheritance is the simplest inheritance. In simple inheritance all the
child classes share the same columns as the parent.

    [php]
    class Entity extends Doctrine_Record 
    {
        public function setTableDefinition() 
        {
            $this->hasColumn('name', 'string', 30);
            $this->hasColumn('username', 'string', 20);
            $this->hasColumn('password', 'string', 16);
            $this->hasColumn('created', 'integer', 11);
        }
    }

    class User extends Entity 
    { }

    class Group extends Entity 
    { }

++ Concrete

Concrete inheritance creates separate tables for child classes. However in 
concrete inheritance each class generates a table which contains all columns 
(including inherited columns). In order to use concrete inheritance you'll need
to add explicit parent::setTableDefinition() calls to child classes as shown above.

    [php]
    class TextItem extends Doctrine_Record
    {
        public function setTableDefinition() 
        {
            $this->hasColumn('topic', 'string', 100);
        }
    }

    class Comment extends TextItem
    {
        public function setTableDefinition() 
        {
            parent::setTableDefinition();    

            $this->hasColumn('content', 'string', 300);
        }
    }

In concrete inheritance you don't necessarily have to define additional columns,
but in order to make Doctrine create separate tables for each class you'll have
to make iterative `setTableDefinition()` calls.

In the following example we have three database tables called `entity`, 
`user` and `group`. Users and groups are both entities. The only thing we 
have to do is write 3 classes (`Entity`, `Group` and `User`) and make 
iterative `setTableDefinition` method calls.

    [php]
    class Entity extends Doctrine_Record 
    {
        public function setTableDefinition() 
        {
            $this->hasColumn('name', 'string', 30);
            $this->hasColumn('username', 'string', 20);
            $this->hasColumn('password', 'string', 16);
            $this->hasColumn('created', 'integer', 11);
        }
    }

    class User extends Entity 
    {
        public function setTableDefinition() 
        {
            // the following method call is needed in
            // one-table-one-class inheritance
            parent::setTableDefinition();
        }
    }

    class Group extends Entity 
    {
        public function setTableDefinition() 
        {
            // the following method call is needed in
            // one-table-one-class inheritance
            parent::setTableDefinition();
        }
    }

++ Column Aggregation

In the following example we have one database table called `entity`. Users 
and groups are both entities and they share the same database table.

The entity table has a column called `type` which tells whether an entity is
a group or a user. Then we decide that users are type 1 and groups type 2.

The only thing we have to do is to create 3 records (the same as before) and add
call the {{Doctrine_Table::setSubclasses()}} method from the parent class.

    [php]
    class Entity extends Doctrine_Record 
    {
        public function setTableDefinition() 
        {
            $this->hasColumn('name', 'string', 30);
            $this->hasColumn('username', 'string', 20);
            $this->hasColumn('password', 'string', 16);
            $this->hasColumn('created', 'integer', 11);

            // this column is used for column
            // aggregation inheritance
            $this->hasColumn('type', 'integer', 11);
            $this->setSubclasses(array(
                'User'  => array('type' => 1),
                'Group' => array('type' => 2)
            ));
        }
    }

    class User extends Entity
    {
    }

    class Group extends Entity
    {
    }

This feature also enable us to query the `Entity` table and get a `User` or
`Group` object back if the returned object matches the constraints set in the
parent class. See the code example below for an example of this.

    [php]
    $user = new User();
    $user->name = 'Bjarte S. Karlsen';
    $user->username = 'meus';
    $user->password = 'rat';
    $user->save();

    $group = new Group();
    $group->name = 'Users';
    $group->username = 'users';
    $group->password = 'password';
    $group->save();

    $q = Doctrine_Query::create();
    $user = $q->from('Entity')->where('id = ?')->fetchOne(array($user->id));
    assert($user instanceOf User);

    $q = Doctrine_Query::create();
    $group = $q->from('Entity')->where('id = ?')->fetchOne(array($group->id));

    echo get_class($group); // prints 'Group'