++ Managing connections

From the start Doctrine has been designed to work with multiple connections. Unless separately specified Doctrine always uses the current connection for executing the queries.

**Opening and Retrieving Connections**

{{Doctrine_Manager}} provides the static method {{Doctrine_Manager::connection()}} which opens new connection when arguments are given to it and returns the current connection when no arguments have been speficied.

In this example we will show you to open a new connection and how you can retrieve the current connection:

<code type="php">
// test.php

// ...
$conn = Doctrine_Manager::connection('mysql://username:password@localhost/test', 'connection 1');

$conn2 = Doctrine_Manager::connection();

if ($conn === $conn2) {
    echo 'Doctrine_Manager::connection() returns the current connection';
}
</code>

The current connection is the last opened connection. In the next example we will show how you can get the current connection from the {{Doctrine_Manager}} instance:

<code type="php">
// test.php

// ...
$conn2 = Doctrine_Manager::connection('mysql://username2:password2@localhost/test2', 'connection 2');

if ($conn2 === $manager->getCurrentConnection()) {
    echo 'Current connection is the connection we just created!';
}
</code>

**Change Current Connection**

You can change the current connection by calling {{Doctrine_Manager::setCurrentConnection()}}. 

<code type="php">
// test.php

// ...
$manager->setCurrentConnection('connection 1');

echo $manager->getCurrentConnection()->getName(); // connection 1
</code>

**Iterate over Connections**

You can iterate over the opened connection by simply passing the manager object to a foreach clause. This is possible since {{Doctrine_Manager}} implements special {{IteratorAggregate}} interface.

<code type="php">
// test.php

// ...
foreach($manager as $conn) {
    echo $conn->getName() . "\n";
}
</code>

**Get name of Connection Instance**

You can easily get the name of a {{Doctrine_Connection}} instance with the following code:

<code type="php">
// test.php

// ...
$conn = Doctrine_Manager::connection();

$name = $manager->getConnectionName($conn);

echo $name; // connection 1
</code>

**Close a Connection**

You can easily close a connection and remove it from the Doctrine connection registry with the following code:

<code type="php">
// test.php

// ...
$conn = Doctrine_Manager::connection();

$manager->closeConnection($conn);
</code>

If you wish to close the connection but not remove it from the Doctrine connection registry you can use the following code instead:

<code type="php">
// test.php

// ...
$conn = Doctrine_Manager::connection();
$conn->close();
</code>

**Get all Connections**

You can retrieve an array of all the registered connections by using the {{Doctrine_Manager::getConnections()}} method like below:

<code type="php">
// test.php

// ...
$conns = $manager->getConnections();
foreach ($conns as $conn) {
    echo $conn->getName() . "\n";
}
</code>

The above is essentially the same as iterating over the {{Doctrine_Manager}} object like we did earlier. Here it is again:

<code type="php">
// test.php

// ...
foreach ($manager as $conn) {
    echo $conn->getName() . "\n";
}
</code>

**Count the number of Connections**

You can easily get the number of connections from a {{Doctrine_Manager}} object since it implements the {{Countable}} interface.

<code type="php">
// test.php

// ...
$num = count($manager);

echo $num;
</code>

The above is the same as doing:

<code type="php">
// test.php

// ...
$num = $manager->count();
</code>

**Creating/Dropping Databases**

When you create connections using Doctrine, you gain the ability to easily create and drop the databases related to those connections.

This is as simple as using some functions provided in the {{Doctrine_Manager}} or {{Doctrine_Connection}} classes.

**Drop/create database for all connections**

The following code will iterate over all instantiated connections and call the {{dropDatabases()}}/{{createDatabases()}} function on each one:

<code type="php">
// test.php

// ...
$manager->createDatabases();

$manager->dropDatabases();
</code>

**Drop/create database for specific connection**

You can easily drop or create the database for a specific {{Doctrine_Connection}} instance by calling the {{dropDatabase()}}/{{createDatabase()}} function on the connection instance with the following code:

<code type="php">
// test.php

// ...
$conn = Doctrine_Manager::connection(); // Gets the current connection

$conn->createDatabase();

$conn->dropDatabase();
</code>