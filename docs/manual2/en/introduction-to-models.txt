++ Introduction

At the lowest level, Doctrine represents your database schema with a set of PHP classes. These classes define the schema and behavior of your model.

A basic model that represents a user in a web application might look something like this.

<code type="php">
class User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('username', 'string', 255);
        $this->hasColumn('password', 'string', 255);
    }

    public function setUp()
    {
        $this->actAs('Timestampable');
    }
}
</code>

Each {{Doctrine_Record}} child class can have a {{setTableDefinition()}} and {{setUp()}} method. The {{setTableDefinition()}} method is for defining columns, indexes and other information about the schema of tables. The {{setUp()}} method is for attaching behaviors and defining relationships between {{Doctrine_Record}} child classes. In the above example we are enabling the Timestampable behavior which adds some automagic functionality. You will learn more about what all can be used in these functions in the [doc models-explained :name] chapter.

++ Generating Models

Doctrine offers ways to generate these classes to make it easier to get started using Doctrine.

> **NOTE**
> Generating from existing databases is only meant to be a convenience for getting started. After you generate from the database you will have to tweak it and clean things up as needed.

+++ Existing Databases

A common case when looking for ORM tools like Doctrine is that the database and the code that access it is growing large/complex. A more substantial tool is needed than manual SQL code. 

Doctrine has support for generating {{Doctrine_Record}} classes from your existing database. There is no need for you to manually write all the {{Doctrine_Record}} classes for your domain model. 

++++ Making the first import

Let's consider we have a mysql database called test with a single table called 'file'.

The file table has been created with the following sql statement:

<code type="sql">
CREATE TABLE file (
    id INT UNSIGNED AUTO_INCREMENT NOT NULL,
    name VARCHAR(150),
    size BIGINT,
    modified BIGINT,
    type VARCHAR(10),
    content TEXT,
    path TEXT,
    PRIMARY KEY(id))
</code>

Now we would like to convert it into {{Doctrine_Record}} class. With Doctrine this is easy! Remember our test script we created in the [doc getting-started :name] chapter? We're going to use that generate our models.

First we need to modify our {{bootstrap.php}} to use the MySQL database instead of sqlite memory:

<code type="php">
// bootstrap.php

// ...
$conn = Doctrine_Manager::connection('mysql://root:mys3cr3et@localhost/doctrine_test', 'doctrine');
// ...
</code>

> **NOTE**
> You can use the {{$conn->createDatabase()}} method to create the database if it does not already exist and the connected user has permission to create databases.

Now we need a place to store our generated classes so lets create a directory named {{models}} in the {{doctrine_test}} directory:

<code>
$ mkdir doctrine_test/models
</code>

Now we just need to add the code to our {{test.php}} script to generate the model classes:

<code type="php">
// test.php

require_once('bootstrap.php');

Doctrine::generateModelsFromDb('models', array('doctrine'), array('generateTableClasses' => true));
</code>

> **NOTE**
> The {{generateModelsFromDb}} method only requires one parameter and it is the import directory (the directory where the generated record files will be put in). The second argument is an array of database names to generate models for, and the third is the array of options to use for the model building.

That's it! Now there should be a file called {{BaseFile.php}} in your {{doctrine_test/models/generated}} directory. The file should look like the following:

<code type="php">
// models/generated/BaseFile.php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseFile extends Doctrine_Record
{
  public function setTableDefinition()
  {
    $this->setTableName('file');
    $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'length' => 4, 'unsigned' => 1, 'primary' => true, 'autoincrement' => true));
    $this->hasColumn('name', 'string', 150, array('type' => 'string', 'length' => 150));
    $this->hasColumn('size', 'integer', 8, array('type' => 'integer', 'length' => 8));
    $this->hasColumn('modified', 'integer', 8, array('type' => 'integer', 'length' => 8));
    $this->hasColumn('type', 'string', 10, array('type' => 'string', 'length' => 10));
    $this->hasColumn('content', 'string', null, array('type' => 'string'));
    $this->hasColumn('path', 'string', null, array('type' => 'string'));
  }

}
</code>

You should also have a file called {{File.php}} in your {{doctrine_test/models}} directory. The file should look like the following:

<code type="php">
// models/File.php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class File extends BaseFile
{

}
</code>

Doctrine will automatically generate a skeleton {{Doctrine_Table}} class for the model at {{doctrine_test/models/UserTable.php}} because we passed the option {{generateTableClasses}} with a value of {{true}}. The file should look like the following:

<code type="php">
// models/FileTable.php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FileTable extends Doctrine_Table
{

}
</code>

You can place custom functions inside the {{File}} and {{FileTable}} classes to customize the functionality of your models. Below are some examples:

<code type="php">
// models/File.php

// ...
class File extends BaseFile
{
    public function fileExists()
    {
        return ($this->path && file_exists($this->path));
    }

    public function deleteFile()
    {
        unlink($this->path);
    }
}
</code>

Now you can use the function to check that the file actually exists and delete it if it does. First we need to modify our {{bootstrap.php}} file to include some code for autoloading our models from the {{models}} directory:

<code type="php">
// bootstrap.php

// ...
Doctrine::loadModels('models');
</code>

> **NOTE**
> The model loading is full explained later in the [doc introduction-to-models:autoloading-models :name] section of this chapter.

Now we can modify {{test.php}} to include some code which will test the changes we made to the {{File}} model:

<code type="php">
// test.php

require_once('bootstrap.php');

$file = new File();
$file->path = 'test.txt';

if ($file->fileExists()) {
    $file->deleteFile();
}
</code>

Create a file named {{test.txt}} for the test code to work with:

<code>
$ touch test.txt
</code>

Now execute the {{test.php}} from your terminal and the {{test.txt}} file we just created will be deleted:

<code>
$ php test.php
</code>

Here is an example of some custom functions you might add to the {{FileTable}} class:

<code type="php">
// models/FileTable.php

// ...
class FileTable extends Doctrine_Table
{
    public function getGifFiles()
    {
        return $this->createQuery('f')
          ->select('f.id, f.name')
          ->where('f.type = ?', 'gif')
          ->execute();
    }
}
</code>

Now you have access to this function when you are working with the {{FileTable}} instance:

<code type="php">
// test.php

// ...
$gifFiles = Doctrine::getTable('File')->getGifFiles();
</code>

+++ Schema Files

You can alternatively manage your models with YAML schema files and generate PHP classes from them. First lets generate a YAML schema file from the existing models we already have to make things easier. Change the contents of the {{test.php}} file with the code from below:

<code type="php">
// test.php

require_once('bootstrap.php');

Doctrine::generateYamlFromModels('schema.yml', 'models');
</code>

Execute the {{test.php}} script:

<code>
$ php test.php
</code>

Now you should see a file named {{schema.yml}} created in the root of the {{doctrine_test}} directory. It should look like the following:

<code type="yaml">
File:
  tableName: file
  columns:
    id:
      type: integer(4)
      unsigned: 1
      primary: true
      autoincrement: true
    name: string(150)
    size: integer(8)
    modified: integer(8)
    type: string(10)
    content: string(2147483647)
    path: string(2147483647)
</code>

So now that we have a valid YAML schema file, we can now maintain our schema from here and generate the PHP classes from here. Lets create a new php script called {{generate_models.php}} and place the following code in it:

<code type="php">
// generate_models.php

require_once('bootstrap.php');

Doctrine::generateModelsFromYaml('schema.yml', 'models');
</code>

Now you can alter your {{schema.yml}} and re-generate your models by running the following command from your terminal:

<code>
$ php generate_models.php
</code>

You can learn more about YAML Schema Files in its [doc yaml-schema-files dedicated chapter].

++ Manually Writing Models

You can optionally skip all the convenience methods and write your models manually using nothing but your own PHP code. You can learn all about the models syntax in the [doc models-explained :name] chapter.

++ Autoloading Models

Doctrine offers two ways of loading models. We have conservative(lazy) loading, and aggressive loading. Conservative loading will not require the PHP file initially, instead it will cache the path to the class name and this path is then used in the {{Doctrine::autoload()}} we registered earlier with spl_autoload_register(). Below are some examples using the both types of model loading.

+++ Conservative

Conservative model loading is going to be the ideal model loading method for a production environment. This method will lazy load all of the models instead of loading them all when model loading is executed.

Conservative model loading requires that each file contain only one class, and the file must be named after the class. For example, if you have a class named {{User}}, it must be contained in a file named {{User.php}}.

To use conservative model loading we need to set the model loading attribute to be conservative:

<code type="php">
Doctrine_Manager::getInstance()->setAttribute('model_loading', 'conservative');
</code>

When we use the {{Doctrine::loadModels()}} functionality all found classes will be cached internally so the autoloader can require them later.

<code type="php">
Doctrine::loadModels('models');
</code>

Now when we instantiate a new class, for example a {{File}} class, the autoloader will be triggered and the class is required.

<code type="php">
$user = new User(); // triggers call to Doctrine::autoload()
</code>

Instantiating the class above triggers a call to {{Doctrine::autoload()}} and the class that was found in the call to {{Doctrine::loadModels()}} will be required and made available.

> **NOTE**
> Conservative model loading is recommended in most cases, specifically for production environments as you do not want to require every single model class even when it is not needed as this is unnecessary overhead. You only want to require it when it is needed.

+++ Aggressive

Aggressive model loading is the default model loading method and is very simple, it will look for all files with a .php extension and will include it. Doctrine can not satisfy any inheritance and if your models extend another model, it cannot include them in the correct order so it is up to you to make sure all dependencies are satisfied in each class.

With aggressive model loading you can have multiple classes per file and the file name is not required to be related to the name of the class inside of the file.

The downside of aggressive model loading is that every php file is included in every request, so if you have lots of models it is recommended you use conservative model loading.

To use aggressive model loading we need to set the model loading attribute to be aggressive:

<code type="php">
Doctrine_Manager::getInstance()->setAttribute('model_loading', 'aggressive');
</code>

> **TIP**
> Aggressive is the default of the model loading attribute so explicitly setting it is not necessary if you wish to use it.

When we use the {{Doctrine::loadModels()}} functionality all the classes found will be included right away:

<code type="php">
Doctrine::loadModels('/path/to/models');
</code>